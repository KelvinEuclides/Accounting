name: Manual Release

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
        - major
        - minor
        - patch
      custom_version:
        description: 'Custom version (optional, overrides version_type)'
        required: false
        type: string
      release_notes:
        description: 'Release notes'
        required: false
        type: string

jobs:
  manual-release:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      pull-requests: write
      actions: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Setup Android SDK
      uses: android-actions/setup-android@v3

    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Read current version
      id: current_version
      run: |
        if [ -f version.properties ]; then
          source version.properties
          echo "major=$VERSION_MAJOR" >> $GITHUB_OUTPUT
          echo "minor=$VERSION_MINOR" >> $GITHUB_OUTPUT
          echo "patch=$VERSION_PATCH" >> $GITHUB_OUTPUT
          echo "build=$VERSION_BUILD" >> $GITHUB_OUTPUT
        else
          echo "major=1" >> $GITHUB_OUTPUT
          echo "minor=0" >> $GITHUB_OUTPUT
          echo "patch=0" >> $GITHUB_OUTPUT
          echo "build=1" >> $GITHUB_OUTPUT
        fi

    - name: Calculate new version
      id: new_version
      run: |
        MAJOR=${{ steps.current_version.outputs.major }}
        MINOR=${{ steps.current_version.outputs.minor }}
        PATCH=${{ steps.current_version.outputs.patch }}
        BUILD=${{ steps.current_version.outputs.build }}
        
        if [ -n "${{ github.event.inputs.custom_version }}" ]; then
          # Parse custom version
          CUSTOM_VERSION="${{ github.event.inputs.custom_version }}"
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CUSTOM_VERSION"
          BUILD=$((BUILD + 1))
          echo "Using custom version: $CUSTOM_VERSION"
        else
          # Use version bump type
          case "${{ github.event.inputs.version_type }}" in
            major)
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              BUILD=1
              ;;
            minor)
              MINOR=$((MINOR + 1))
              PATCH=0
              BUILD=$((BUILD + 1))
              ;;
            patch)
              PATCH=$((PATCH + 1))
              BUILD=$((BUILD + 1))
              ;;
          esac
        fi
        
        NEW_VERSION="$MAJOR.$MINOR.$PATCH"
        echo "major=$MAJOR" >> $GITHUB_OUTPUT
        echo "minor=$MINOR" >> $GITHUB_OUTPUT
        echo "patch=$PATCH" >> $GITHUB_OUTPUT
        echo "build=$BUILD" >> $GITHUB_OUTPUT
        echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "version_code=$((MAJOR * 10000 + MINOR * 1000 + PATCH * 100 + BUILD))" >> $GITHUB_OUTPUT

    - name: Update version.properties
      run: |
        cat > version.properties << EOF
        # Version configuration for Accounting App
        # This file is automatically updated by CI/CD pipeline
        
        # Major version - increment for breaking changes
        VERSION_MAJOR=${{ steps.new_version.outputs.major }}
        
        # Minor version - increment for new features  
        VERSION_MINOR=${{ steps.new_version.outputs.minor }}
        
        # Patch version - increment for bug fixes
        VERSION_PATCH=${{ steps.new_version.outputs.patch }}
        
        # Build number - automatically incremented by CI
        VERSION_BUILD=${{ steps.new_version.outputs.build }}
        EOF

    - name: Build and test
      run: |
        ./gradlew assembleDebug
        ./gradlew test

    - name: Commit version update
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add version.properties
        git commit -m "chore: manual release version ${{ steps.new_version.outputs.version }} [skip ci]"
        git push

    - name: Create Git Tag
      run: |
        git tag -a "v${{ steps.new_version.outputs.version }}" -m "Manual release version ${{ steps.new_version.outputs.version }}"
        git push origin "v${{ steps.new_version.outputs.version }}"

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.new_version.outputs.version }}
        name: Release v${{ steps.new_version.outputs.version }}
        body: |
          ## Manual Release v${{ steps.new_version.outputs.version }}
          
          ${{ github.event.inputs.release_notes || 'Manual release created via GitHub Actions workflow.' }}
          
          ## Build Information
          - Version: ${{ steps.new_version.outputs.version }}
          - Version Code: ${{ steps.new_version.outputs.version_code }}
          - Branch: ${{ github.ref_name }}
          - Commit: ${{ github.sha }}
        draft: false
        prerelease: false
        files: |
          ./app/build/outputs/apk/debug/app-debug.apk